Subarray Sum Equals K 
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int ret = 0;
        int sums[nums.size()];
        sums[0] = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            sums[i] = sums[i -1] + nums[i];
        }
        
        for(int i = 0; i < nums.size(); i++) {
            //if(nums[i] == k) {
                //ret++;
            //}
            
            for(int j = 0; j < i; j++) {
                if(k == sums[i] - sums[i]) {
                    ret++;
                }
            }
        }
        
        return ret;
    }
};


palidromic substring

class Solution {
public:
    int countSubstrings(string s) {
        int ret = 0;
        bool dp[s.size()][s.size()];
        
        dp[0][0] = true;
        
        for(int i = 0; i < s.size(); i++) {
            for(int j = 0; j <= i; j++) {
                if((s[j] == s[i]) && (i - j <= 2 || dp[j + 1][i - 1])) {
                    ret++;
                }
            }
        }
        return ret;
    }
};

Decode String

class Solution {
public:
    string decodeString(string s) {
        string ret;
        dfs(0, 0, s, ret);
        return ret;
    }
    
    void dfs(int start, int time, string s, string ret) {
        
        for(int i = start; i < s.size(); i++) {
            if(s[i] <= '9' && s[i] >= '0') {
                return dfs(i + 1, s[i] - '0', s, ret);
            } else if(s[i] > '9' && s[i] < '0' && s[i] != '[' && s[i] != ']') {
                for(int j = 0; j < time; j++) {
                    ret += s[j];   
                }
            } else {
                i++;
            }
        }     
    }
};


Longest Increasing Subsequence

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        
        int ret = 0;
        vector<int> dp(nums.size(), 1);
        
        for(int i = 0; i < nums.size(); i++) {
            for(int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }    
            ret = max(ret, dp[i]);
        }
        
        return ret;
    }
};

79. Word Search

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        return bfs(0, 0, 0, word, board);
    }
    
    bool bfs(int index, int i, int j, string& word, vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
    
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                
                if(board[i][j] = '0' || board[i][j] != word[index])
                    continue; 
                
                if(board[i][j] == word[index] && index == word.size() - 1) 
                    return true;
                 
                board[i][j] = '0';
                
                if(board[i][j] = word[index]) {
                    if(index + 1 < word.size()) {
                        if(i + 1 < m) 
                            return bfs(index + 1, i + 1, j, word, board);
                        if(i - 1 >= 0) 
                            return bfs(index + 1, i - 1, j, word, board);
                        if(j + 1 < n)
                            return bfs(index + 1, i, j + 1, word, board);
                        if(j - 1 >= 0)
                            return bfs(index + 1, i, j - 1, word, board);
                    }       
                }
            }
        }
        
        return false;
    }
};

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        return bfs(0, 0, 0, word, board);
    }
    
    bool bfs(int index, int i, int j, string& word, vector<vector<char>>& board) {
        int m = board.size();
        int n = board[0].size();
        
        if(index >= word.size() || i < 0 || i > m - 1 || j < 0 || j > n -1 ) {
            return false;
        }  
    
        if(board[i][j] = '0' || board[i][j] != word[index])
            return false; 
                
        if(board[i][j] == word[index] && index == word.size() - 1) 
            return true;
                
        if(board[i][j] = word[index]) {
            board[i][j] = '0';
            bool flag = bfs(index + 1, i + 1, j, word, board) || bfs(index + 1, i - 1, j, word, board) || bfs(index + 1, i, j + 1, word, board) || return bfs(index + 1, i, j - 1, word, board);
            return flag;
            board[i][j] = word[index];
        }       
                
        return false;
    }
};

word break 

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> set(wordDict.begin(), wordDict.end());
        bool ret = dsf(s, 0, set);
        return ret;
    }
    
    bool dfs(string s, int index, unordered_set<string>& set) {
        
        if(index == s.size() - 1) {
            return true;
        }
        
        for(int i = index; i < s.size(); i++) {
            if(set.count(s.subStr(index, i - 1)) && dfs(s, i + 1, set)) {
                return true;
            }
        }
        
        return false;
    }
};

word break DP

class solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
        bool dp[s.size()];
        dp[0] = true;
        
        for(int i = 0; i < s.size(); i++) {
            for(int j = 0; j < i; j++) {
                dp[i] = wordSet.count(s.substr(j, i - j)) && dp[j];
                if (dp[i])
                    break;
            }
        }
        return dp[s.size() - 1];
    }
}


valid binary seavalid binary search treerch tree
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return dfs(root);
    }
    
    bool dfs(TreeNode *root) {
        if(!root) 
            return true;
        if(root->left && root->val < root->left->val)
            return false;
        if(root->right && root->val > root->right->val)
            return false;
            
        return dfs(root->left) && dfs(root->right);
    }
};


serialize and deserialize 

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        ostringstream ret;
        dfs(root, ret);
        return ret.str();
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        istringsstream in(data);
        return deserialize(in);
    }
    
private:
    
    void dfs(TreeNode *root, ostringstream& ret) {
        if(!root)
            ret << "#";
        
        ret << root->val;
        
        if(!root->left) {
            dfs(root->left, ret);
        }
        
        if(!root->right) {
            dfs(root->right, ret);
        }
            
    }
    
    TreeNode* deserialize(istringsstream& data) {
        if(data[index] == '#') {
            return NULL;
        }
        
        string tmp;
        data >> tmp;
        TreeNode *root = new TreeNode(atoi(tmp));
        root->left = deserialize(data);
        root->right = deserialize(data);
        return root;
    }
};


perfect square

class Solution {
public:
    int numSquares(int n) {

        vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = 1;
        
        for(int i = 2; i <= n; i++) {
          for(int j = 1; j <= i; j++) {
            dp[i] = min(dp[i], dp[i - (j * j)] + 1);
          }  
        } 
        
        return dp[n];
    }
};

maximum product subarray // sign integer overflow...

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int ret = nums[0];
        int dp_max[nums.size()];
        int dp_min[nums.size()];
        
        dp_max[0] = nums[0];
        dp_min[0] = nums[0];
        
        for(int i = 1; i < nums.size(); i++) {
            dp_max[i] = max(dp_max[i - 1] * nums[i], max(dp_min[i] * nums[i], nums[i]));
            dp_min[i] = min(dp_min[i - 1] * nums[i], min(dp_max[i] * nums[i], nums[i]));
            ret = max(dp_max[i], ret);
        }
        
        return ret;
    }
};


maximum square

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        
        int max_len = matrix[0][0] - '0';
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        for(int i = 0; i < m; i++) {
            dp[i][0] = matrix[i][0] - '0';
        }
        
        for(int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i] - '0';
        }
                
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(matrix[i][j] == '0') {
                    dp[i][j] = 0;
                    continue;
                }
                    
                dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                max_len = max(max_len, dp[i][j]);
            }
        }
        
        return max_len * max_len;
    }
};

longest substring without repeating characters

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int ret = 0;
        int left = -1;
        unordered_map<char, int> char2index;
        int dp[s.size()] = {0};
        dp[0] = 1;
        
        for(int i = 1; i < s.size(); i++) {    
            if(!char2index.count(s[i])) {
                dp[i] = dp[i - 1] + 1;
            } else {
                if(char2index[s[i]] > left) {
                    dp[i] = i - char2index[s[i]];
                    left = char2index[s[i]];
                } 
            }   
            char2index[s[i]] = i;
            ret = max(ret, dp[i]);
        }
        
        return ret;
    }
};


generate parenthese

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ret;
        string tmp; 
        dfs(n, 0, 0, ret, tmp);
        return ret;
    }
    
    void dfs(int n, int left, int right, vector<string>& vec, string tmp) {
        if(left < right) {
            return;
        }
        
        if(left == n && right == n) {
            vec.push_back(tmp);
			return;
        }
        
        if(left + 1 >= n) 
            dfs(n, left + 1, right, vec, tmp + "(");
        if(right + 1 >= n)
            dfs(n, left, right + 1, vec, tmp + ")");
    }
};

construct binary tree from preorder and inorder traversal

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return dfs(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1);
    }
    
private:   
    int find_len(vector<int> vec, int start, int target) {
        int len = 1;
        
        for(int i = start; i < vec.size(); i++) {
            if(vec[i] == target) {
                return len;
            }
            len++;
        }
        
        return -1;
    }
    
    TreeNode* dfs(vector<int>& preorder, int pre_start, int pre_end, vector<int>& inorder, int in_start, int in_end) {
        if(pre_start > pre_end || in_start > in_end) {
            return NULL;
        }
        
        TreeNode *root = new TreeNode(preorder[pre_start]);
        int len = find_len(inorder, in_start, preorder[pre_start]);
        root->left = dfs(preorder, pre_start + 1, pre_start + len - 1, inorder, in_start, in_start + len - 1);
        root->right = dfs(preorder, pre_start + len + 1, pre_end, inorder, in_start + len + 1, in_end);   
        return root;
    }
    
};

convert BST to greater tree

class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        int sum = 0;
        dfs(root, sum);
        return root;
    }
    
private:    
    void dfs(TreeNode *root, int sum) {
        
        if(!root) {
            return;
        }
        
        //if(root->right)
            dfs(root->right, sum);
        
        root->val += sum;
        sum = root->val;
        
        //if(root->left)
            dfs(root->left, sum);
    }
};


level order traversal 

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root) return {};
        
        vector<vector<int>> ret;
        queue<TreeNode*> q;
        q.push(root);
        
        while(!q.empty()) {
            vector<int> level;
            for(int i = 0; i < q.size(); ++i) {
                TreeNode *tmp = q.front();
                q.pop();
                level.push_back(tmp->val);
                
                if(tmp->left)
                    q.push(tmp->left);
                if(tmp->right)
                    q.push(tmp->right);
            }
            
            ret.push_back(level);
        }   
        
        return ret;
    }
};

124. Binary Tree Maximum Path Sum

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int sum = INT_MIN;
        return dfs(root, sum);
    }
    
private:
    int dfs(TreeNode *root, int& sum) {
        if(!root)
            return 0;
        
        int l = dfs(root->left, sum);
        int r = dfs(root->right, sum);
        
        int val = max(root->val, max(root->val + r + l, root->val + max(l, r)));
        
        if(val >= sum)
            sum = val;
        return sum;
    }
};


Jump game II

class Solution {
public:
    int jump(vector<int>& nums) {
        int dp[nums.size()] = {INT_MAX};
        dp[0] = 0;
        
        for(int i = 1; i < nums.size(); i++) {
            for(int j = 0; j < i; j++) {
                if(i - j <= nums[j]) {
                    dp[i] = min(dp[j] + 1, dp[i]);
                } 
            }
        }
        return dp[nums.size() - 1];
    }
};


path sum III

class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(!root)
            return 0;        
        return dfs(root, sum) + dfs(root->left, sum) + dfs(root->right, sum);   
    }
    
    int dfs(TreeNode *root, int sum) {
        if(!root) {
            return 0;
        }
        
        return (sum == root->val) + dfs(root->left, sum - root->val) + dfs(root->right, sum - root->val);
    }
};

binary tree maximum path sum

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        return max(dfs(root), max(dfs(root->left), dfs(root->right)));
    }
    
private:
    int dfs(TreeNode *root) {
        if(!root)
            return 0;
        
        unsigned int l = dfs(root->left);
        unsigned int r = dfs(root->right);
        
        return max(root->val + r + l, root->val + max(l, r));   
    }
};


minimum path sum

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();   
        int n = grid[0].size();
        int dp[m] = {INT_MAX};
        dp[0] = 0;// grid[0][0];
        
        for(int i = 0; i < m; i++) {
            dp[0] += grid[i][0];
            for(int j = 1; j < n; j++) {
                dp[j] = grid[i][j] + min(dp[j - 1], dp[j]);
            }
        } 
        return dp[m - 1];
    }
};

palindromic substring

class Solution {
public:
    int countSubstrings(string s) {
        int ret = 0;
        bool dp[s.size()][s.size()] = {false};
        dp[0][0] = true;
        
        for(int i = 0; i < s.size(); i++) {
            for(int j = 0; j <= i; j++) {
                if((s[j] == s[i]) && (i - j < 2 || dp[j + 1][i - 1])) {
                    ret += 1;
                }
            }
        }
        
        return ret;
    }
};

number of island // i have already check, my original code is almost the same as the leetcode submmited code, why???

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int ret = 0;
        int m = grid.size();
        int n = grid[0].size();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1') {
                    dfs(grid, i, j);
                    ret++;
                }
            }
        }
        return ret;
    }
    
    void dfs(vector<vector<char>>& grid, int x, int y) {
        int m = grid.size();
        int n = grid[0].size();
        if(x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == '0') {
            return;
        }
        
        grid[x][y] = '0';
        dfs(grid, x + 1, y);
        dfs(grid, x - 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x, y - 1);
    }
};

min stack 

class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        s_.push(x);
        if(min_s_.empty() && x < min_s_.top()) {
            min_s_.push(x);
        }
    }
    
    void pop() {
        int cur = s_.top();
        s_.pop();
        if(!min_s_.empty() && cur == min_s_.top()) {
            min_s_.pop();
        } 
    }
    
    int top() {
        return s_.top();
    }
    
    int getMin() {
        return min_s_.top();
    }
    
private:
    stack<int> s_;
    stack<int> min_s_;
};

sort List

class Solution {
public:
    ListNode* sortList(ListNode* head) {
        ListNode *p = head;
        ListNode *q = head;
        
        if(!head || !head->next)
            return head;
        
        while(q && q->next) {
            p = p->next;
            q = q->next->next;
        }
        
        ListNode *tmp = p;
        p = p->next;
        tmp->next = NULL;
        
        ListNode *left = sortList(head);
        ListNode *right = sortList(p);
        
        return sortCore(left, right);
    }
    
    ListNode *sortCore(ListNode *left, ListNode *right) {
        if(!left || !right) {
            return left ? left: right;
        }
        
        ListNode *pre = new ListNode(-1);
        ListNode *dummy = pre;
        
        while(left && right) {
            if(left->val < right->val) {
                pre->next = left;
                left = left->next;
            }else {
                pre->next = right;
                right = right->next;
            }
            pre = pre->next;
        }
        
        pre->next = left? left: right;
        
        return dummy->next;
    }
    
};

top K frequent element

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> ret;
        unordered_map<int,int> dic;
        priority_queue<pair<int, int> > q;
        
        for(int i = 0; i < nums.size(); i++) {
            nums[i]++;
        }
        
        auto itr = dic.begin();
        for(; itr != dic.end(); itr++) {
            q.push(make_pair(itr->second, itr->first));
        }
        
        int cnt = 0;
        while(!q.empty()) {
            if(++cnt > k)
                break;
            ret.push_back(q.top().second);
            q.pop();
        }
        
        return ret;
    }
};

230. Kth Smallest Element in a BST

class Solution {
public:
    int kthGiggest(TreeNode* root, int k) {
        int ret = 0;
        inOrderTraversal(root, k, ret);
        return ret;
    }
    
    void inOrderTraversal(TreeNode *root, int& k, int& ret) {
        if(!root)
            return;
        inOrderTraversal(root->right, k, ret);
        if(--k == 0) {
            ret = root->val;
        }
        inOrderTraversal(root->left, k, ret);
    }
    
    int kthSmallest(TreeNode* root, int k) {
        int ret = 0;
        inOrderTraversal2(root, k, ret);
        return ret;
    }
    
    void inOrderTraversal2(TreeNode *root, int& k, int& ret) {
        if(!root)
            return;
        
        inOrderTraversal(root->left, k, ret);
        if(--k == 0) {
            ret = root->val;
        }
        inOrderTraversal(root->right, k, ret);
    }
};


basic caculator

class Solution {
public:
    int calculate(string s) {
        int ret = 0;
        stack<char> stk;
        
        for(int i = 0; i < s.size(); i++) {
            if(!stk.empty() && (stk.top() == '*' || stk.top() == '/')) {
                char operators = stk.top(); stk.pop();
                char val1 = stk.top(); stk.pop();
                stk.push(compute(val1, s[i], operators));
            }
            
            stk.push(s[i]);
        }
        
        while(!stk.empty()) {
            char val2 = stk.top(); stk.pop();
            char operators = stk.top(); stk.pop();
            char val1 = stk.top(); stk.pop();
            stk.push(compute(val1, val2, operators));
        }
        
        return ret;
    }
    
    char compute(char val1, char val2, char operators) {
        int ret = 0;
        switch(operators) {
            case '+':
                ret = val1 - '0' + val2 - '0';
                break;
            case '-':
                ret = val1 - '0' - val2 - '0';
                break;
            case '*':
                ret = (val1 - '0') * (val2 - '0');
                break;
            case '/':
                ret = (val1 - '0') / (val2 - '0');
                break;
            default:
                break;
        }
        return '0' + ret;
    }
    
    
    int calculate2(string s) {
        stack<int> myStack;
        char sign = '+';
        int res = 0, tmp = 0;
        for (unsigned int i = 0; i < s.size(); i++) {
            if (isdigit(s[i]))
                tmp = 10*tmp + s[i]-'0';
            if (!isdigit(s[i]) && !isspace(s[i]) || i == s.size()-1) {
                if (sign == '-')
                    myStack.push(-tmp);
                else if (sign == '+')
                    myStack.push(tmp);
                else {
                    int num;
                    if (sign == '*' )
                        num = myStack.top()*tmp;
                    else
                        num = myStack.top()/tmp;
                    myStack.pop();
                    myStack.push(num);
                } 
                sign = s[i];
                tmp = 0;
            }
        }
        while (!myStack.empty()) {
            res += myStack.top();
            myStack.pop();
        }
        return res;
    }

}; 
